-- // Dependencies
_G.PRED = 0.037
local FadedASS = loadstring(game:HttpGet("https://raw.githubusercontent.com/sx65/fadedd/main/sadsd"))()
FadedASS.TeamCheck(false)
FadedASS.ShowFOV = false
FadedASS.FOV = 1
-- // Services
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- // Vars
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local CurrentCamera = Workspace.CurrentCamera

local SilentAimSettings = {
    SilentAim = false,
    AimLock = false,
    Prediction = 0.165, -- do not change bcs of auto prediction
    AimLockKeybind = Enum.KeyCode.E
}
getgenv().SilentAimSettings = SilentAimSettings

-- // Overwrite to account downed
function FadedASS.Check()
    -- // Check A
    if not (FadedASS.Enabled == true and FadedASS.Selected ~= LocalPlayer and FadedASS.SelectedPart ~= nil) then
        return false
    end

    -- // Check if downed
    local Character = FadedASS.Character(FadedASS.Selected)
    local KOd = Character:WaitForChild("BodyEffects")["K.O"].Value
    local Grabbed = Character:FindFirstChild("GRABBING_CONSTRAINT") ~= nil

    -- // Check B
    if (KOd or Grabbed) then
        return false
    end

    -- //
    return true
end

-- // Hook
local __index
__index = hookmetamethod(game, "__index", function(t, k)
    -- // Check if it trying to get our mouse's hit or target and see if we can use it
    if (t:IsA("Mouse") and (k == "Hit" or k == "Target") and FadedASS.Check()) then
        -- // Vars
        local SelectedPart = FadedASS.SelectedPart

        -- // Hit/Target
        if (SilentAimSettings.SilentAim and (k == "Hit" or k == "Target")) then
            -- // Hit to account prediction
            local Hit = SelectedPart.CFrame + (SelectedPart.Velocity * SilentAimSettings.Prediction)

            -- // Return modded val
            return (k == "Hit" and Hit or SelectedPart)
        end
    end

    -- // Return
    return __index(t, k)
end)



RunService.RenderStepped:Connect(function()

    local ping = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
    local Value = tostring(ping)
    local pingValue = Value:split(" ")
    local PingNumber = pingValue[1]
    
    SilentAimSettings.Prediction = PingNumber / 1000 + _G.PRED
	           if FadedASS.Character ~= nil then
	                if FadedASS.Character.Humanoid.Jump == true and AimlockTarget.Character.Humanoid.FloorMaterial == Enum.Material.Air then
                    FadedASS.TargetPart = "RightFoot"
                else
					
					FadedASS.TargetPart = FadedASS.SelectedPart
					
					end
					
			
					
			
            end

end)
    
